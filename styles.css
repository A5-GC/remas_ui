// Firebase Initialization
const firebaseConfig = {
    apiKey: "AIzaSyA9WkNeMgcrgmhUA97UPbp7R4pj-IZFnK0",
    authDomain: "atom5engineering.firebaseapp.com",
    projectId: "atom5engineering",
    storageBucket: "atom5engineering.firebasestorage.app",
    messagingSenderId: "956458197323",
    appId: "1:956458197323:web:e01873bb7fa92ac70a08ce",
    measurementId: "G-X7H184TN54"
};
firebase.initializeApp(firebaseConfig);

const storage = firebase.storage();
const auth = firebase.auth();

// Ensure the user is authenticated
auth.onAuthStateChanged(function(user) {
    if (user) {
        loadFiles(user);
    } else {
        window.location.href = "index.html";
    }
});

// Load Files
function loadFiles(user) {
    const sanitizedEmail = user.email;
    const userBucketPath = `users/${sanitizedEmail}/files/`;
    const storageRef = storage.ref(userBucketPath);
    const fileList = document.getElementById("file-list");
    fileList.innerHTML = "Loading files...";

    storageRef.listAll().then((result) => {
        if (result.items.length === 0) {
            fileList.innerHTML = "<li>No files found.</li>";
        } else {
            fileList.innerHTML = ""; // Clear loading message
            result.items.forEach((fileRef) => {
                const li = document.createElement("li");
                li.textContent = fileRef.name;
                li.onclick = function() {
                    openFile(fileRef);
                };
                fileList.appendChild(li);
            });
        }
    }).catch((error) => {
        console.error("Error loading files:", error);
        fileList.innerHTML = "<li>Error loading files.</li>";
    });
}

// Open File
function openFile(fileRef) {
    fileRef.getDownloadURL().then((url) => {
        fetch(url)
            .then(response => response.json())
            .then(data => console.log("File Content:", data))
            .catch((error) => console.error("Error fetching file:", error));
    }).catch((error) => console.error("Error getting file URL:", error));
}

// Resize and Minimize Functionality
let isResizing = false;
let isVerticalResizing = false;
const rightPanel = document.getElementById('file-explorer');
const minimizeBtn = document.getElementById('minimize-explorer');

// Minimize or Restore Panel
minimizeBtn.addEventListener('click', () => {
    const toolbar = rightPanel.querySelector('.toolbar');
    if (rightPanel.classList.contains('minimized')) {
        rightPanel.classList.remove('minimized');
        minimizeBtn.textContent = 'âˆ’';
    } else {
        rightPanel.classList.add('minimized');
        minimizeBtn.textContent = '+';
    }
});

// Drag to Resize - Horizontal
rightPanel.addEventListener('mousedown', (e) => {
    if (e.offsetX > rightPanel.offsetWidth - 10) {
        isResizing = true;
        document.body.style.cursor = 'ew-resize';
    }
});

// Drag to Resize - Vertical (File Explorer)
document.getElementById('file-list').addEventListener('mousedown', (e) => {
    if (e.offsetY > document.getElementById('file-list').offsetHeight - 10) {
        isVerticalResizing = true;
        document.body.style.cursor = 'ns-resize';
    }
});

// Resize Logic
document.addEventListener('mousemove', (e) => {
    if (isResizing) {
        rightPanel.style.width = `${e.clientX}px`;
    }
    if (isVerticalResizing) {
        document.getElementById('file-list').style.height = `${e.clientY - rightPanel.getBoundingClientRect().top}px`;
    }
});

document.addEventListener('mouseup', () => {
    isResizing = false;
    isVerticalResizing = false;
    document.body.style.cursor = '';
});
